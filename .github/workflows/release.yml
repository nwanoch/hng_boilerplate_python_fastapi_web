name: Automated Release (Python FastAPI)

on:
  push:
    branches:
      - main # or your default branch name

jobs:
  check_and_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Get latest version
        id: get_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo ::set-output name=VERSION::v0.0.0
            echo ::set-output name=FIRST_RELEASE::true
          else
            echo ::set-output name=VERSION::$LATEST_TAG
            echo ::set-output name=FIRST_RELEASE::false
          fi

      - name: Check for changes since last tag
        id: check_changes
        run: |
          if [ "${{ steps.get_version.outputs.FIRST_RELEASE }}" == "true" ]; then
            echo ::set-output name=changes::1
          else
            git diff --quiet ${{ steps.get_version.outputs.VERSION }}..HEAD -- .
            echo ::set-output name=changes::$?
          fi

      - name: Set up Python
        if: steps.check_changes.outputs.changes == 1
        uses: actions/setup-python@v2
        with:
          python-version: "3.9" # or your preferred Python version

      - name: Install dependencies
        if: steps.check_changes.outputs.changes == 1
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Bump version and push tag
        if: steps.check_changes.outputs.changes == 1
        id: bump_version
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_WITHOUT_V="${VERSION#v}"
          if [ -z "$VERSION_WITHOUT_V" ]; then
            NEW_VERSION="v0.0.1"
          else
            IFS='.' read -ra VERSION_PARTS <<< "$VERSION_WITHOUT_V"
            PATCH=$((VERSION_PARTS[2] + 1))
            NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          fi
          echo $NEW_VERSION
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $NEW_VERSION -m "Automated release $NEW_VERSION"
          git push origin $NEW_VERSION
          echo ::set-output name=new_version::$NEW_VERSION

      - name: Create Release
        if: steps.check_changes.outputs.changes == 1
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            Automated release for changes since ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Zip Project
        if: steps.check_changes.outputs.changes == 1
        run: zip -r release.zip . -x "*.git*"

      - name: Upload Release Asset
        if: steps.check_changes.outputs.changes == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
